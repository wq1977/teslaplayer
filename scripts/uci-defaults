#!/bin/bash
uci set wireless.radio0.disabled='0'  # 启用无线设备

# for 树莓派 3B
uci set wireless.@wifi-iface[0].ssid='OpenWrt-AP'
uci set wireless.@wifi-iface[0].encryption='psk2'
uci set wireless.@wifi-iface[0].key='12345678'

# for 树莓派 3B+
# uci set wireless.radio0.type='mac80211'
# uci set wireless.radio0.channel='149'
# uci set wireless.radio0.path='platform/soc/3f300000.mmcnr/mmc_host/mmc1/mmc1:0001/mmc1:0001:1'
# uci set wireless.radio0.htmode='VHT80'
# uci set wireless.radio0.country='CN'
# uci set wireless.radio0.band='5g'
# uci set wireless.default_radio0=wifi-iface
# uci set wireless.default_radio0.device='radio0'
# uci set wireless.default_radio0.network='lan'
# uci set wireless.default_radio0.mode='ap' 
# uci set wireless.default_radio0.ssid='OpenWrt-AP'
# uci set wireless.default_radio0.encryption='psk2'
# uci set wireless.default_radio0.key='12345678'

uci commit wireless
wifi reload

# 配置 USB 网络
uci set network.usb0=interface
uci set network.usb0.proto='dhcp'
uci set network.usb0.device='usb0'

# 将 USB 接口添加到 lan 桥接
uci add_list network.lan.ifname='usb0'

# 启用 USB 模式切换
uci set usbmode.config.enable='1'

# 配置防火墙
uci add_list firewall.@zone[1].network='usb0'

uci commit

# 创建自动检测和配置 USB 网络的脚本
cat << 'EOF' > /etc/hotplug.d/usb/30-usb-network
#!/bin/sh

if [ "${ACTION}" = "add" ]; then
  # 等待设备初始化
  sleep 5

  # 检查是否存在 usb0 接口
  if ip link show usb0 > /dev/null 2>&1; then
    logger "USB network device detected, bringing up interface"
    ifup usb0
    # 重启网络以应用更改
    /etc/init.d/network restart
  fi
fi
EOF

chmod +x /etc/hotplug.d/usb/30-usb-network

# 修改 uhttpd 配置
uci set uhttpd.main.listen_http='8080'
uci set uhttpd.main.listen_https='8443'
uci commit uhttpd

mkdir -p /root/scripts
cat << 'EOF' > /root/scripts/checkUpdate
# 检查是否提供了当前版本号参数
if [ $# -eq 0 ]; then
    echo "请提供当前版本号作为参数"
    exit 1
fi

CURRENT_VERSION="$1"
REPO="wq1977/teslaplayer"
API_URL="https://api.github.com/repos/$REPO/releases/latest"

# 获取最新版本信息
LATEST_INFO=$(curl -s "$API_URL")

# 使用jq解析JSON,获取最新版本号
LATEST_VERSION=$(echo "$LATEST_INFO" | jq -r .tag_name)

# echo "当前版本: $CURRENT_VERSION"
# echo "最新版本: $LATEST_VERSION"

# 比较版本号
if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
    # echo "发现新版本,开始更新..."

    # 获取zip文件的下载URL
    DOWNLOAD_URL=$(echo "$LATEST_INFO" | jq -r '.assets[] | select(.name | endswith(".zip")) | .browser_download_url')

    if [ -z "$DOWNLOAD_URL" ]; then
        echo "未找到zip文件,退出更新"
        exit 1
    fi

    # 创建临时目录
    TEMP_DIR=$(mktemp -d)
    ZIP_FILE="$TEMP_DIR/update.zip"

    # 下载zip文件
    # echo "下载更新文件..."
    curl -L "$DOWNLOAD_URL" -o "$ZIP_FILE"

    # 解压到/tesla目录
    # echo "解压文件到/tesla目录..."
    mount -o remount,rw /tesla
    unzip -o "$ZIP_FILE" -d /tesla
    mount -o remount,ro /tesla
    
    # 清理临时文件
    rm -rf "$TEMP_DIR"

    echo "更新完成"
else
    echo "当前已是最新版本,无需更新"
fi
EOF

chmod +x /root/scripts/checkUpdate

# /etc/nginx/conf.d/tesla.conf
cat << 'EOF' > /etc/nginx/conf.d/tesla.conf
server {
    listen 3337;
    server_name localhost;

    location / {
        proxy_pass http://127.0.0.1:8080;
        proxy_set_header Host \$http_host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}

server {
    listen 80;
    server_name tesla;
    root /tesla;

    location /run {
        default_type text/plain;
        charset utf-8;
        content_by_lua '
        local args = ngx.req.get_uri_args()
        local script = args.s
        local script_args = args.args or ""
        
        if not script then
            ngx.say("错误：未提供脚本名称")
            return
        end
        
        local script_path = "/root/scripts/" .. script
        local command = script_path .. " " .. script_args:gsub(",", " ")
        
        local handle = io.popen(command)
        local result = handle:read("*a")
        handle:close()
        
        ngx.say(result)
        ';
    }

    location /list {
        default_type application/json;
        content_by_lua '
local lfs = require("lfs")
local json = require("cjson")

function find_mp4_files(directory)
    local mp4_files = {}
    local base_length = #directory + 1

    local function recursive_search(dir)
        for file in lfs.dir(dir) do
            if file ~= "." and file ~= ".." and not file:match("^%.") then
                local path = dir .. "/" .. file
                local attr = lfs.attributes(path)

                if attr.mode == "directory" then
                    recursive_search(path)
                elseif attr.mode == "file" then
                    local ext = file:match("%.([^.]+)$")
                    if ext and ext:lower() == "mp4" then
                        local relative_path = path:sub(base_length)
                        table.insert(mp4_files, {path = relative_path})
                    end
                end
            end
        end
    end

    recursive_search(directory)
    return json.encode(mp4_files)
end
ngx.say("{\\"files\\":" .. find_mp4_files("/tesla/media") .. "}")
        ';
    }
}

server {
    listen 3339;
    server_name localhost;
    root /tesla;

     location / {
        proxy_pass http://192.168.59.29:3339;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$http_host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_read_timeout 3600s;
        proxy_send_timeout 3600s;
    }
}
EOF

uci delete nginx._lan
uci delete nginx._redirect2ssl
uci commit nginx

# 确保 Nginx 开机自启
/etc/init.d/nginx enable

# 用剩余空间
DEVICE="/dev/mmcblk0"
TOTAL_SECTORS=$(fdisk -l $DEVICE | grep '^Disk' | awk '{print $7}')
LAST_USED_SECTOR=$(fdisk -l $DEVICE | grep "^${DEVICE}p" | tail -1 | awk '{print $3}')
START_SECTOR=$((LAST_USED_SECTOR + 1))
END_SECTOR=$((TOTAL_SECTORS - 1))
echo -e "n\np\n\n${START_SECTOR}\n${END_SECTOR}\nt\n\n7\nw" | fdisk $DEVICE
sync
NEW_PARTITION=$(fdisk -l $DEVICE | grep "^${DEVICE}p" | tail -1 | awk '{print $1}')
mkfs.exfat -L "Tesla" $NEW_PARTITION
mkdir /tesla

# /etc/rc.local
cat  << 'EOF' > /etc/rc.local
# https://github.com/wq1977/teslaplayer
# 2024.9.1 v2
ip addr add 3.3.6.6/32 dev br-lan
mount /boot -o remount,ro
mount / -o remount,ro
mount -t exfat -o ro /dev/mmcblk0p3 /tesla
EOF